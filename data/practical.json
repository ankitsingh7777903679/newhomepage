{
    "mcq": [
      {
        "question": "1. Which language is commonly used for practical programming in BCA?",
        "options": [
          "a) C#",
          "b) HTML"
        ],
        "correctAnswer": "a",
        "id": "practical-q1",
        "isImportant": false
      }
    ],
    "onemarks": [
      {
        "question": "1. What is a practical program?",
        "answer": "A practical program is a hands-on coding exercise that demonstrates the application of theoretical concepts in a real-world scenario.",
        "isImportant": false
      }
    ],
    "long": [
      {
        "question": "1. Write a java programe to create EMPLOYEE class with name, age, and salary data member.\nTack input(data) from user and create minimum 5 objects of employee class.\nDisplay all employee's data in order of salary.",
        "answer": "The program creates an Employee class with name, age, and salary. It takes user input for 5 employees via Scanner, stores them in an ArrayList, sorts them by salary using Comparable, and prints the sorted list.",
        "code": "import java.util.*;\n\nclass Employee implements Comparable<Employee> {\n    String name;\n    int age;\n    double salary;\n\n    Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n\n    @Override\n    public int compareTo(Employee other) {\n        return Double.compare(this.salary, other.salary);\n    }\n\n    @Override\n    public String toString() {\n        return \"Name: \" + name + \", Age: \" + age + \", Salary: \" + salary;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        List<Employee> employees = new ArrayList<>();\n\n        System.out.println(\"Enter details for 5 employees:\");\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Employee \" + (i + 1) + \":\");\n            System.out.print(\"Name: \");\n            String name = sc.nextLine();\n            System.out.print(\"Age: \");\n            int age = sc.nextInt();\n            System.out.print(\"Salary: \");\n            double salary = sc.nextDouble();\n            sc.nextLine();\n            employees.add(new Employee(name, age, salary));\n        }\n\n        Collections.sort(employees);\n        System.out.println(\"\\nEmployees sorted by salary:\");\n        for (Employee emp : employees) {\n            System.out.println(emp);\n        }\n        sc.close();\n    }\n}",
        "isImportant": false
      },
      {
        "question": "2. Write a program to display a triangle inside of circle with all vertices touching the perimeter of the circle.\nAlso fill diff colour of your choice.",
        "answer": "The applet draws a blue circle using fillOval and a yellow triangle inside it with fillPolygon. The triangle’s vertices are calculated using trigonometry to touch the circle’s edge.",
        "code": "import java.applet.Applet;\nimport java.awt.*;\n\npublic class CircleTriangle extends Applet {\n    public void paint(Graphics g) {\n        int centerX = 150, centerY = 150, radius = 100;\n\n        g.setColor(Color.BLUE);\n        g.fillOval(centerX - radius, centerY - radius, 2 * radius, 2 * radius);\n\n        int[] xPoints = {centerX, centerX + (int)(radius * Math.cos(Math.PI / 6)), \n                         centerX - (int)(radius * Math.cos(Math.PI / 6))};\n        int[] yPoints = {centerY - radius, centerY + (int)(radius * Math.sin(Math.PI / 6)), \n                         centerY + (int)(radius * Math.sin(Math.PI / 6))};\n        g.setColor(Color.YELLOW);\n        g.fillPolygon(xPoints, yPoints, 3);\n    }\n}",
        "isImportant": false
      },
      {
        "question": "3. Write a program to create and display singly linked list and perform following task:\n1. Insert node at specific position.\n2. Delete node from specific position.",
        "answer": "The program creates a linked list with Node and LinkedList classes. insertAtPos adds a node at a given position by adjusting pointers, and deleteAtPos removes a node by skipping it. display shows the list.",
        "code": "class Node {\n    int data;\n    Node next;\n\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\nclass LinkedList {\n    Node head;\n\n    void insertAtPos(int data, int pos) {\n        Node newNode = new Node(data);\n        if (pos == 1) {\n            newNode.next = head;\n            head = newNode;\n            return;\n        }\n        Node temp = head;\n        for (int i = 1; i < pos - 1 && temp != null; i++) {\n            temp = temp.next;\n        }\n        if (temp != null) {\n            newNode.next = temp.next;\n            temp.next = newNode;\n        }\n    }\n\n    void deleteAtPos(int pos) {\n        if (head == null) return;\n        if (pos == 1) {\n            head = head.next;\n            return;\n        }\n        Node temp = head;\n        for (int i = 1; i < pos - 1 && temp != null; i++) {\n            temp = temp.next;\n        }\n        if (temp != null && temp.next != null) {\n            temp.next = temp.next.next;\n        }\n    }\n\n    void display() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n        list.insertAtPos(10, 1);\n        list.insertAtPos(20, 2);\n        list.insertAtPos(15, 2);\n        System.out.println(\"Original List:\");\n        list.display();\n\n        list.deleteAtPos(2);\n        System.out.println(\"After deleting at position 2:\");\n        list.display();\n    }\n}",
        "isImportant": false
      },
      {
        "question": "4. Write a program to enter string at command line input and then sort string into ascending order.",
        "answer": "The program reads a string from command-line args, converts it to a char array, sorts it with Arrays.sort(), and prints the original and sorted strings.",
        "code": "import java.util.Arrays;\n\npublic class StringSort {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"Please provide a string as command line argument.\");\n            return;\n        }\n\n        String input = args[0];\n        char[] chars = input.toCharArray();\n        Arrays.sort(chars);\n        String sorted = new String(chars);\n\n        System.out.println(\"Original String: \" + input);\n        System.out.println(\"Sorted String: \" + sorted);\n    }\n}",
        "isImportant": false
      },
      {
        "question": "5. Write a application that execute tow threads.\nOne thread display \"BCA\" Every 1000 millisecond and the order displays \"MCA\" every 3000 millisecond.\nCreate the thread by extending the thread class.",
        "answer": "The program extends Thread to create two classes: BCAThread and MCAThread. Each runs an infinite loop printing 'BCA' every 1s and 'MCA' every 3s using sleep(). main starts both threads.",
        "code": "class BCAThread extends Thread {\n    public void run() {\n        while (true) {\n            System.out.println(\"BCA\");\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass MCAThread extends Thread {\n    public void run() {\n        while (true) {\n            System.out.println(\"MCA\");\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        BCAThread bca = new BCAThread();\n        MCAThread mca = new MCAThread();\n        bca.start();\n        mca.start();\n    }\n}",
        "isImportant": false
      },
      {
        "question": "6. Write a java program to create a player history that can be display in the following form.\nPlayer name and team name is stored in Player class.\nScore of test match and One Day match in the other class say Run class number of One Day match and number of test match must be in Match class and finally calculate the average.\nThe packagel contains Player, Run and Match classes, Where package2 contain main() class.",
        "answer": "The program splits classes into two packages. mypackage has Player (name, team), Run (scores), and Match (match counts). mypackage2’s main creates objects, calculates averages, and prints them.",
        "code": "package mypackage;\n\npublic class Player {\n    String playerName, teamName;\n    public Player(String pn, String tn) {\n        playerName = pn;\n        teamName = tn;\n    }\n    public String getDetails() {\n        return \"Player: \" + playerName + \", Team: \" + teamName;\n    }\n}\n\npackage mypackage;\n\npublic class Run {\n    int testScore, odiScore;\n    public Run(int ts, int os) {\n        testScore = ts;\n        odiScore = os;\n    }\n    public int getTestScore() { return testScore; }\n    public int getOdiScore() { return odiScore; }\n}\n\npackage mypackage;\n\npublic class Match {\n    int testMatches, odiMatches;\n    public Match(int tm, int om) {\n        testMatches = tm;\n        odiMatches = om;\n    }\n    public int getTestMatches() { return testMatches; }\n    public int getOdiMatches() { return odiMatches; }\n}\n\npackage mypackage2;\nimport mypackage.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Player p = new Player(\"Virat\", \"India\");\n        Run r = new Run(5000, 12000);\n        Match m = new Match(50, 200);\n\n        double testAvg = (double) r.getTestScore() / m.getTestMatches();\n        double odiAvg = (double) r.getOdiScore() / m.getOdiMatches();\n\n        System.out.println(p.getDetails());\n        System.out.println(\"Test Avg: \" + testAvg);\n        System.out.println(\"ODI Avg: \" + odiAvg);\n    }\n}",
        "isImportant": false
      },
      {
        "question": "7. Write an Applet Code to draw a circle and draw triangle inside a circle and write java in the center of figure.",
        "answer": "The applet uses fillOval to draw a blue circle, fillPolygon for a yellow triangle inside it (vertices calculated with trig), and drawString to place 'Java' in the center.",
        "code": "import java.applet.Applet;\nimport java.awt.*;\n\npublic class DrawShape extends Applet {\n    public void paint(Graphics g) {\n        int centerX = 150, centerY = 150, radius = 100;\n\n        g.setColor(Color.BLUE);\n        g.fillOval(centerX - radius, centerY - radius, 2 * radius, 2 * radius);\n\n        int[] xPoints = {centerX, centerX + (int)(radius * Math.cos(Math.PI / 6)), \n                         centerX - (int)(radius * Math.cos(Math.PI / 6))};\n        int[] yPoints = {centerY - radius, centerY + (int)(radius * Math.sin(Math.PI / 6)), \n                         centerY + (int)(radius * Math.sin(Math.PI / 6))};\n        g.setColor(Color.YELLOW);\n        g.fillPolygon(xPoints, yPoints, 3);\n\n        g.setColor(Color.BLACK);\n        g.drawString(\"Java\", centerX - 15, centerY);\n    }\n}",
        "isImportant": false
      },
      {
        "question": "8. Write a java program to design a class Mystring having data member of type String add member function to achieve following task.\ni Reverse String\nii. String in tOGGLECASE\nIii. Sentence case\niv. Extract N-Characters from right-end of the string.\nWrite a menu driven program to call these methods Mystring Class.\nThe program must use Exception handling.",
        "answer": "The program defines MyString with methods: reverse (StringBuilder), toggleCase (char array), sentenceCase (string ops), and extractNFromRight (substring with exception). A menu loop calls these, handling errors with try-catch.",
        "code": "import java.util.Scanner;\n\nclass MyString {\n    String str;\n\n    MyString(String s) {\n        str = s;\n    }\n\n    String reverse() {\n        return new StringBuilder(str).reverse().toString();\n    }\n\n    String toggleCase() {\n        char[] chars = str.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) chars[i] = Character.toLowerCase(chars[i]);\n            else if (Character.isLowerCase(chars[i])) chars[i] = Character.toUpperCase(chars[i]);\n        }\n        return new String(chars);\n    }\n\n    String sentenceCase() {\n        if (str.length() == 0) return str;\n        return Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase();\n    }\n\n    String extractNFromRight(int n) throws IllegalArgumentException {\n        if (n > str.length()) throw new IllegalArgumentException(\"N exceeds string length\");\n        return str.substring(str.length() - n);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        MyString ms = new MyString(sc.nextLine());\n\n        while (true) {\n            System.out.println(\"\\n1. Reverse\\n2. Toggle Case\\n3. Sentence Case\\n4. Extract N from Right\\n5. Exit\");\n            System.out.print(\"Choice: \");\n            int choice = sc.nextInt();\n\n            try {\n                switch (choice) {\n                    case 1: System.out.println(\"Reverse: \" + ms.reverse()); break;\n                    case 2: System.out.println(\"Toggle: \" + ms.toggleCase()); break;\n                    case 3: System.out.println(\"Sentence: \" + ms.sentenceCase()); break;\n                    case 4: \n                        System.out.print(\"Enter N: \");\n                        int n = sc.nextInt();\n                        System.out.println(\"Extracted: \" + ms.extractNFromRight(n)); \n                        break;\n                    case 5: System.exit(0);\n                    default: System.out.println(\"Invalid choice\");\n                }\n            } catch (IllegalArgumentException e) {\n                System.out.println(\"Error: \" + e.getMessage());\n            }\n        }\n    }\n}",
        "isImportant": false
      },
      {
        "question": "9. Write an applet program which accepts name of the shape user wants to display using parameter tag and display shape accordingly.\nApply formatting.\nWrite VNSGU in Center of the shape, the shapes could be rectangle oval and triangle.",
        "answer": "The applet reads a shape name from a parameter tag, draws it in red (fillRect, fillOval, or fillPolygon), and adds 'VNSGU' in black at the center with drawString.",
        "code": "import java.applet.Applet;\nimport java.awt.*;\n\npublic class ShapeApplet extends Applet {\n    String shape;\n\n    public void init() {\n        shape = getParameter(\"shape\");\n    }\n\n    public void paint(Graphics g) {\n        int centerX = 150, centerY = 150, size = 100;\n\n        g.setColor(Color.RED);\n        if (shape.equalsIgnoreCase(\"rectangle\")) {\n            g.fillRect(centerX - size, centerY - size, 2 * size, 2 * size);\n        } else if (shape.equalsIgnoreCase(\"oval\")) {\n            g.fillOval(centerX - size, centerY - size, 2 * size, 2 * size);\n        } else if (shape.equalsIgnoreCase(\"triangle\")) {\n            int[] xPoints = {centerX, centerX + size, centerX - size};\n            int[] yPoints = {centerY - size, centerY + size, centerY + size};\n            g.fillPolygon(xPoints, yPoints, 3);\n        }\n\n        g.setColor(Color.BLACK);\n        g.drawString(\"VNSGU\", centerX - 20, centerY);\n    }\n}",
        "isImportant": false
      }
    ]
  }